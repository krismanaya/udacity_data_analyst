breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(memisc)
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = "jitter" )  +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
stat_smooth(method = "lm") +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(grid)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library('ggplot2')
data("diamonds")
names(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('red'), color = I('black'), shape = 21) +
xlim(0,quantile(diamonds$carat, .99)) +
ylim(0, quantile(diamonds$price, .99)) +
stat_smooth(method = "lm") #linear trend line.
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
#ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
library(grid)
plot1 <- qplot(x = price, data = diamonds, binwidth = 100, fill = I('red')) +
ggtitle('Price')
plot2 <- qplot(x = price, data = diamonds, bindwidth = 0.01, fill = I('orange')) +
ggtitle('Price (log10)') +
scale_x_log10()
grid.arrange(plot1, plot2, ncol = 2)
qplot(carat, price, data = diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price (log10) by Carat")
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = "jitter" )  +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
stat_smooth(method = "lm") +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
library(RColorBrewer)
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = .75, position = "jitter" )  +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
stat_smooth(method = "lm") +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, colour = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.package('bitops')
install.packages('RCurl')
install.package('bitops')
install.packages('bitops')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load("diamondsbig.csv")
load("BigDiamonds.Rda")
Bdf <- load("BigDiamonds.Rda")
name(Bdf)
Data(BigDiamonds)
data(BigDiamonds)
data("BigDiamonds")
data("BigDiamonds.Rda")
load("BigDiamonds.Rda")
?BigDiamonds
diamondsBigSample <- read.csv('diamondsBigSample.csv')
diamondsBigSample <- read.csv('diamondsBigSample.csv', sep = "t")
diamondsBig <- load("BigDiamonds.Rda")
names(diamondsBig)
summary(diamondsBig)
diamondsBig <- load("BigDiamonds.Rda")
summary(diamondsBig)
diamondsbig <- load("BigDiamonds.Rda")
summary(diamondsBig)
load("BigDiamonds.Rda")
summary(diamondsbig)
plot1 <- qplot(x = price, data = diamondsbig, binwidth = 100, fill = I('red')) +
ggtitle('Price')
plot1
plot1 <- qplot(x = cut data = diamondsbig, binwidth = 100, fill = I('red')) +
plot1
plot1 <- qplot(x = cut, data = diamondsbig, binwidth = 100, fill = I('red')) +
ggtitle('Price')
plot1
plot1 <- qplot(x = cut, data = diamondsbig, binwidth = 100, fill = I('red'), stat = "count") +
ggtitle('Price')
plot1
plot1 <- qplot(x = cut, data = diamondsbig, binwidth = 100, fill = I('red')) +
ggtitle('Price')
summary(diamondsbig)
plot1 <- qplot(x = color, data = diamondsbig, binwidth = 100, fill = I('red')) +
ggtitle('Price')
plot1
plot1 <- qplot(x = price, data = diamondsbig, binwidth = 100, fill = I('red')) +
ggtitle('Price')
plot1
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
m5 <- update(m4, ~ . + clarity)
m5 <- update(m4, ~ . + clarity)
library('memisc')
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
library('memisc')
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
modelEstimate = predict(m4, newdata = thisDiamond,
interval="prediction", level = .95)
dat = data.frame(m4$model, m4$residuals)
modelEstimate = predict(m4, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
library(RColorBrewer)
library('bitops')
library('RCurl')
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src") # set my directory.
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
library(RColorBrewer)
library('bitops')
library('RCurl')
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src") # set my directory.
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src") # set my directory.
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
library(RColorBrewer)
library('bitops')
library('RCurl')
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src") # set my directory.
summary(cars)
plot(pressure)
getwd()
bsdf <- read.csv("P60007168-CA.csv", sep = "t")
names(bsdf)
summary(bsdf)
name(bsdf)
names(bsdf)
bsdf <- read.csv("P60007168-CA.csv") #load bernie sanders dataset and call if bsdf
bsdf <- read.csv("P60007168-CA.csv", header = header) #load bernie sanders dataset and call if bsdf
bsdf <- read.csv("P60007168-CA.csv", header = TRUE) #load bernie sanders dataset and call if bsdf
bsdf <- read.csv("P60007168-CA.csv", header = TRUE) #load bernie sanders dataset and call if bsdf
bsdf <- read.csv("P60007168-CA.csv", header = TRUE, sep = ",") #load bernie sanders dataset and call if bsdf
bsdf <- read.csv("P60007168-CA.csv", sep = ",") #load bernie sanders dataset and call if bsdf
names(bsdf)
bsdf <- read.csv("P60007168-CA.csv", header = TRUE, sep = ",") #load bernie sanders dataset and call if bsdf
names(bsdf)
bsdf <- read.csv("P60007168-CA.csv", sep = "t")
head(bsdf)
names(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv")
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, row.name = NULL)
name(bsdf)
names(bsdf)
head(bsdf)
head(bsdf$contb_receipt_amt)
bsdf <- read.csv(file = "P60007168-CA.csv", row.name = NULL)
names(bsdf)
head(bsdf$contb_receipt_amt)
head(bsdf$)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = T, fill = T row.name = NULL)[,-1]
bsdf <- read.csv(file = "P60007168-CA.csv", header = T, fill = T row.name = NULL)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE, row.name = NULL)[,-1]
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE)[,-1]
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE, sep = ",", row.names = NULL)[,-1]
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE, sep = "t", row.names = NULL)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE, row.names = NULL)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE, row.names = FALSE)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, fill = TRUE, row.names = TRUE)
test <- c(1,2,3,4,5)
test[2,]
test
test[,2]
test[2:]
test[1]
test[2]
test[2:3]
test[2:4]
test[2:5]
test[2:length(test)]
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE)[2:18]
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, rown.names = NULL)[2:18]
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, row.names = NULL)[2:18]
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = FALSE, row.names = NULL)[2:18]
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, row.names = NULL)[2:18]
write.table(bsdf, file = "bernie.tst", sep = "\t", row.names = FALSE)
write.table(bsdf, file = "bernie.tsv", sep = "\t", row.names = FALSE)
bsdf <- read.csv(file = "bernie.tsv", header = TRUE)
head(bsdf)
bsdf <- read.csv(file = "bernie.tsv", sep = "t", header = TRUE)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, row.names = NULL)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = TRUE, row.names = NULL)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = TRUE, row.names = NULL)
```
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = TRUE, row.names = NULL)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE)
bsdf <- read.csv(file = "P60007168-CA.csv", header = TRUE, row.names = NULL)
head(bsdf)
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src") # set my directory.
getwd()
bsdf <- read.csv(file = "bernie_data_set.numbers")
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = TRUE)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = "\t", header = TRUE)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = "\t", header = FALSE)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
head(bsdf)
bsdf[1,]
colnames(bsdf[1,])
bsdf
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", skip = 1, header = FALSE)
head(bsdf)
bsdf = bsdf[-1,] # removing the first row
colnames(bsdf) = bsdf[1, ] # the first row will be the header
bsdf = bsdf[-1,] # removing the first row
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
colnames(bsdf) = bsdf[1, ] # the first row will be the header
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
head(bsdf)
colnames(bsdf)
colnames(bsdf) <- bsdf[1,]
head(bsdf)
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
bsdf = bsdf[-1,]
colnames(bsdf) <- as.character(unlist(bsdf[1,]))
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
colnames(bsdf) <- as.character(unlist(bsdf[1,]))
bsdf = bsdf[-1,]
head(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
head(bsdf)
colnames(bsdf) <- c("cmte_id", "cand_id", "cand_nm", "contbr_nm",
"contbr,city", "contbr_st", "contbr_zip",
"contbr_employer", "contbr_occupation",
"conb_receipt_amt", "contb_receipt_dt",
"receipt_desc", "memo_cd",
"memo_text", "form_tp", "file_num",
"tan_id", "election_tp")
head(bsdf)
bsdf  = bsdf[-1,] #drop first row in dataset
head(bsdf)
names(bsdf)
bsdf[,!NA, with = FALSE]
bsdf[,!NA, with=FALSE]
bsdf[, NA := NULL]
table(bsdf)
table(head(bsdf))
?bsdf
??bsdf
length(bsdf$cand_id)
str(bsdf)
bsdf <- read.csv(file = "P60007168-CA.csv", sep = ",", header = FALSE)
colnames(bsdf) <- c("cmte_id", "cand_id", "cand_nm", "contbr_nm",
"contbr_city", "contbr_st", "contbr_zip",
"contbr_employer", "contbr_occupation",
"conb_receipt_amt", "contb_receipt_dt",
"receipt_desc", "memo_cd",
"memo_text", "form_tp", "file_num",
"tan_id", "election_tp") # rename columns
bsdf  = bsdf[-1,] #drop first row in dataset
head(bsdf) #looks good!
ggplot(aes(x = "contbr_st", y = "contbr_zip"), data = bsdf) + geom_poin()
ggplot(aes(x = "contbr_st", y = "contbr_zip"), data = bsdf) + geom_point()
qplot(contbr_cit, data = bsdf)
qplot(contbr_city, data = bsdf)
qplot(contbr_city, data = bsdf) +
facet_wrap(!contbr_zip)
qplot(contbr_city, data = bsdf) +
facet_wrap(~contbr_zip)

subtitle = "Trump (red) v. Bernie (blue)",
caption= "source: .gov")  +
coord_map()  +  theme(panel.background = element_rect(fill = "gray49"),
panel.grid.major.x = element_line(size = .1, color = "gray 8"),
panel.grid.major.y = element_line(size = .1, color = "gray 8"))
# heat map for trump and bernie.
top_city <- names(sort(table(merge_bs_dt_df$city), decreasing = TRUE))[1:10] #top_city data
top_jobs <- names(sort(table(merge_bs_dt_df$occupation), decreasing = T))[1:10] #top_jobs column
logical_top_city_jobs <- (merge_bs_dt_df$city %in% top_city) &
(merge_bs_dt_df$occupation %in% top_jobs) #merge
#create heat map with legend.
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~canidate)
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~canidate, ncols = 1)
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~canidate, ncol = 1)
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~canidate, ncol = 1)
#install.packages("stringr")
#install.packages(c("maps","mapdata"))
#install.packages("ggmap")
library(mapdata)
library(maps)
library(ggmap)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
library(RColorBrewer)
library('bitops')
library('RCurl')
setwd("/Users/Anaya/repos/udacity_data_analyst/project_4/src") # set my directory.
############################################# Bernie Dataset ###################
bsdf <- read.csv(file = "P60007168-CA.csv",
sep = ",", header = FALSE)
colnames(bsdf) <- c("cmte_id", "cand_it",
"canidate", "name",
"city", "state", "zip",
"employer", "occupation",
"amount", "date",
"receipt", "memo",
"memo_text", "form_tp", "file_number",
"tan_id", "election_tp") # rename columns
bsdf  = bsdf[-1,] #drop first row in dataset
myvars <- c("name","canidate",
"city","state","zip",
"employer","occupation",
"amount","date","receipt") #create data columns
bsdf <- bsdf[myvars] #pick columns I need.
bsdf$amount <- as.numeric(as.character(bsdf$amount)) #change amount to numeric
bsdf$zip <- as.numeric(as.character(bsdf$zip)) #change zip to numeric#change date
bsdf$date <- strptime(bsdf$date, "%d-%b-%y")
bsdf$date <- as.POSIXlt(bsdf$date)
############################################# Trump Dataset ######################################################
dtdf <- read.csv("P80001571-CA.csv",
sep = ",", header = FALSE)
colnames(dtdf) <- c("cmte_id", "cand_id", "canidate",
"name","city", "state",
"zip", "employer",
"occupation", "amount",
"date","receipt", "memo",
"memo_text", "form_tp",
"file_number","tran_id", "election_tp") # rename columns
dtdf = dtdf[-1,] #drop first row
myvars <- c("name","canidate","city","state","zip",
"employer","occupation","amount","date","receipt") #create data columns
dtdf <- dtdf[myvars] #choose columns i'm interested in.
dtdf$amount <- as.numeric(as.character(dtdf$amount)) #change amount to numeric
dtdf$zip <- as.numeric(as.character(dtdf$zip)) #change zip to numeric#change date
dtdf$date <- strptime(dtdf$date, "%d-%b-%y") #fix date
dtdf$date <- as.POSIXlt(dtdf$date) #fix date
############################################# Map Datasets ##########################################################
counties <- map_data("county")
ca_county <-subset(counties, region == "california")
#create a unique datafram using google long and lat queries.
#cities <- as.data.frame(unique(bsdf$city))
#names(cities)[names(cities) == 'unique(bsdf$city)'] <- 'city'
#cities$city_state <- paste(as.character(cities$city), "CA", sep=", ")
#cities.new <- cbind(geocode(as.character(cities$city_state)), cities)
#write.csv(cities.new, file = "California_geoLocation_new.csv",row.names=FALSE)
## filling in columns with matching IDs from two dataframes in R
# Source: http://stackoverflow.com/questions/25539326/filling-in-columns-with-matching-ids-from-two-dataframes-in-r
geoloc <- read.csv('California_geoLocation_new.csv', row.names=NULL) #load dataset
nm <- c("lon", "lat") #add lat long
bsdf[nm] <- lapply(nm,
function(x) geoloc[[x]][match(as.character(bsdf$city),
as.character(geoloc$city))]) #create loc dataset for bernie
dtdf[nm] <- lapply(nm,
function(x) geoloc[[x]][match(as.character(dtdf$city),
as.character(geoloc$city))]) #apply it to trump dataset
############################################## Sample Datasets ###########################################################
#Bernie sample
set.seed(20000)
sample_bernie <- bsdf[sample(1:length(bsdf$amount), 3000), ] #sample dataset for bernie
#subset dataframes
largest_cities_bsdf <- subset(bsdf, city == c("SAN FRANCISCO", "SAN JOSE",
"LOS ANGELES","SACRAMENTO",
"SAN DIEGO", "OAKLAND",
"BERKELEY")) #sanders contributions in bigger cities
refund_bsdf <- subset(bsdf,
receipt == "Refund" & city ==  c("BAKERSFIELD",
"SAN JOSE", "LOS ANGELES",
"SACRAMENTO","SAN DIEGO",
"HUNTINGTON BEACH",
"OAKLAND",
"BERKELEY",
"SAN FRANCISCO"))  # largest cities who obtained a refund.
largest_amount_bsdf <- subset(largest_cities_bsdf, amount > 0) #no refunds in dataset
#Trump Sample
set.seed(20000)
sample_trump <- bsdf[sample(1:length(dtdf$amount), 3000), ] #sample dataset for trump
largest_cities_dtdf <- subset(dtdf,
city == c("BAKERSFIELD",
"SAN JOSE", "LOS ANGELES",
"SACRAMENTO","SAN DIEGO",
"HUNTINGTON BEACH")) #sanders contributions in bigger cities
refund_dtdf <- subset(dtdf,
receipt == "Refund" & city ==  c("BAKERSFIELD",
"SAN JOSE",
"LOS ANGELES",
"SACRAMENTO",
"SAN DIEGO",
"HUNTINGTON BEACH",
"OAKLAND",
"BERKELEY",
"SAN FRANCISCO"))   # largest cities who obtained a refund.
largest_amount_dtdf <- subset(largest_cities_dtdf, amount > 0) #no refunds in dataset.
############################################## Merge Dataset ###########################################################
merge_bs_dt_df <- merge(bsdf, dtdf, all = TRUE) # merge both datasets
largest_cities_merge <- subset(merge_bs_dt_df,
city == c("BAKERSFIELD", "SAN JOSE",
"LOS ANGELES","SACRAMENTO",
"SAN DIEGO", "HUNTINGTON BEACH",
"OAKLAND", "BERKELEY",
"SAN FRANCISCO")) # largest cities for both canidates
largest_amount_merge <- subset(largest_cities_merge, amount > 0) # no refunds in ammount
############################################ Sample Merge Dataset ######################################################
#create only Bernie and Trump:
merge_bs_dt_df_subset <- merge_bs_dt_df[merge_bs_dt_df$canidate %in%
c("Trump, Donald J.",
"Sanders, Bernard"),]
#create some variables that I want for correlation.
merge_bs_dt_df_subset <- subset(merge_bs_dt_df, select = c(canidate, amount))
#drop unused levels
merge_bs_dt_df_subset <- droplevels(merge_bs_dt_df_subset)
#summary
str(merge_bs_dt_df) #observe merge data
summary(merge_bs_dt_df) #view summary of data
################################################# Amount ###################################################
# create histogram of count vs amount facet_wrap by canidates.
qplot(x = amount, data = merge_bs_dt_df_subset) +
labs(title = "Bernie v Trump Contributions",
subtitle = "Count vs. Amount",
caption = ".gov") +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,100)) +
scale_y_continuous(limits = c(0,10000), breaks = seq(0,10000,1000))
#take the sqrt and then scale it by base 10.
ggplot(aes(x = amount),
data = merge_bs_dt_df_subset) +
geom_histogram(boundary = 0) +  #set boundary.
labs(title = "Bernie v Trump Contributions Base 10",
subtitle = "Count vs. Amount",
caption = ".gov") +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,2000,100)) +
coord_trans(y ="sqrt") +
scale_y_log10()
################################################## Cities ################################################
city_text <- element_text(size = 10) #change x.axis text
# creat a subset of merge_bs_dt_df with largest mentropolitan cities and plot them using qplot function.
choose_city_df_sample <- subset(merge_bs_dt_df,
merge_bs_dt_df$city %in%
c("BAKERSFIELD", "SAN JOSE", "SAN FRANCISCO",
"BERKELEY", "LOS ANGELES",
"SACRAMENTO","SAN DIEGO", "OAKLAND",
"HUNTINGTON BEACH"))
qplot(x = city, data = choose_city_df_sample) +
labs(title = "Bernie v Trump Contributions",
subtitle = "Count vs. City",
caption = ".gov") +
theme(axis.text.x = city_text) +
coord_flip()
###################################################### Occupation #############################################
occupation_text <- element_text(size = 10) #change x.axis text
# create a subset of merge_bs_dt_df with largest occupations in data set and plot.
choose_occupation_df_sample <- subset(merge_bs_dt_df,
merge_bs_dt_df$occupation %in%
c("NOT EMPLOYED", "RETIRED",
"INFORMATION REQUESTED",
"TEACHER", "ENGINEER"))
qplot(x = occupation, data = choose_occupation_df_sample) +
labs(title = "Bernie v Trump Contributions",
subtitle = "Count vs. Occupation",
caption = ".gov") +
theme(axis.text.x = occupation_text) +
coord_flip()
############################################# Name #############################################
name_text <- element_text(size = 10) #change x.axis text
#create a subset of merge_bs_dt_df with most contributed by name and plot.
choose_name_df_sample <- subset(merge_bs_dt_df,
merge_bs_dt_df$name %in%
c("WEIL, MONIQUE", "MCLENNAN, MARLYN",
"AUSLENDER, LEONARD", "ISERI, MARTIN",
"SPEAR, JOSEPH", "DAVIDSON, LISA",
"(Other)"))
qplot(x = name, data = choose_name_df_sample) +
labs(title = "Bernie V Trump Contributions",
subtitle = "Count vs. Name",
caption = ".gov") +
theme(axis.text.x = occupation_text) +
coord_flip() #flip coordinates for better read.
#subset data set with people unemployed
not_employed_df <- subset(merge_bs_dt_df, occupation == "NOT EMPLOYED")
#create plot of amount by unemployment
ggplot(aes(x = amount),
data = not_employed_df) +
geom_histogram(boundary = 0) + #force bondary.
labs(title = "Bernie V Trump Contributions",
subtitle = "Count vs. Name",
caption = ".gov") +
scale_x_continuous(limits = c(0,500)) +
scale_y_continuous(limits = c(0,1000)) +
scale_y_log10()
#create a summary of amount by state
by(not_employed_df$amount, not_employed_df$state, summary)
#subset datafram based on name
largest_cont_df <- subset(merge_bs_dt_df,
merge_bs_dt_df$name %in%
c("WEIL, MONIQUE", "MCLENNAN, MARLYN",
"AUSLENDER, LEONARD", "ISERI, MARTIN",
"SPEAR, JOSEPH", "DAVIDSON, LISA"))
#create regular qplot based on amount
ggplot(aes(x = amount), data = largest_cont_df)  +
geom_histogram(boundary = 0) +
labs(title = "Largest COntributors")
#create limits of plot based on amount
ggplot(aes(x = amount), data = largest_cont_df) +
geom_histogram(boundary = 0) +
labs(title = "Largest Contributors") +
scale_x_continuous(limits = c(0,500)) +
scale_y_continuous(limits = c(0,300))
#remove outliers
ggplot(aes(x = amount), data = largest_cont_df) +
geom_histogram(boundary = 0) +
labs(title = "Largest Contributors") +
scale_x_continuous(limits = c(0,150)) +
scale_y_continuous(limits = c(0,290))
#notcied boundary error
summary(largest_cont_df$amount)
summary(largest_cont_df$amount >= 0 & largest_cont_df$amount <30)
#skew tail then take a logtransform
ggplot(largest_cont_df, aes(x = amount)) +
geom_histogram(boundary = 0) +
labs(title = "Largest Contributors") +
scale_x_continuous(limits = c(0,150)) +
scale_y_continuous(limits = c(0,290)) +
scale_y_log10()
#color plot
ggplot(aes(x = amount),
data = largest_cont_df) +
geom_histogram(boundary = 0 ) +
labs(title = "Bernie V Trump Contributions",
subtitle = "Largest Contributors by Amount",
caption = ".gov") +
scale_x_continuous(limits = c(0,150)) +
scale_y_continuous(limits = c(0,290)) +
scale_y_log10() +
facet_wrap(~name)
str(merge_bs_dt_df)
summary(merge_bs_dt_df)
#change text size
occupation_text <- element_text(size = 8) #change x.axis text
#create a plot of occupation from largest contributors
qplot(x = occupation, data = largest_cont_df, color = I("black")) +
labs(title = "Bernie V Trump Contributions",
subtitle = "Largest Contributors by Occupation",
caption = ".gov") +
theme(axis.text.x = occupation_text) +
facet_wrap(~name) +
coord_flip()
#largest amounts across the board from the names dataframe
summary(largest_cont_df$amount)
# select some variables that you want to use in your comparison
merge_correlation_comparison <- subset(merge_bs_dt_df,
select = c(date, amount, canidate))
#drop unused levels
merge_correlation_comparison <- droplevels(merge_correlation_comparison)
#brief overview of data
summary(merge_correlation_comparison)
#cross validation matrix
set.seed(20022012) # set the seed
merge_samp <-
merge_correlation_comparison[sample(1:length(merge_correlation_comparison$
amount),
10000), ]
#create plot of date, amount and canidate.
ggpairs(merge_samp,
lower = list(continuous = wrap("points", shape = I("."))),
upper = list(continuous = wrap("box", outlier.shape = I("."))),
title = "Matrix plot of Date, Amount from Canidates.")
#histogram, first set theme
#set text size
text_size <- element_text(size = 5)
#create histogram of canidates by date
ggplot(merge_samp, aes(x = date, y = amount)) +
geom_line(stat="identity",
position = position_nudge()) +
theme(axis.text.x = text_size) +
scale_color_manual(values=c("deepskyblue3", "firebrick3")) +
xlab("Date") + ylab("Amount") + # Set axis labels
ggtitle("Contributions by Date") +     # Set title
theme_bw()
#set text size
text_size <- element_text(size = 10)
#create histogram of canidates by date but facet_wrap it in one column
ggplot(merge_samp, aes(x = date, y = canidate)) +
geom_histogram(stat="identity") +
theme(axis.text.x = text_size,
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_fill_manual(values=c("deepskyblue3", "firebrick3")) +
ggtitle("Contributions by Date") +     # Set title
facet_wrap(~canidate, ncol = 1)
#create a by function of summary by date and canidate.
by(merge_samp$date, merge_samp$canidate, summary)
#line graph
ggplot(data = choose_city_df_sample, aes(date, amount, color = canidate)) +
geom_line() +
labs(titie = "Line Graph for Sanders V Trump",
subtitle = "Amount vs Date",
caption = "source: .gov") +
facet_wrap(~canidate, ncol = 1) +
scale_color_manual(values=c("deepskyblue3", "firebrick3"))
#hisogram of refunds of bernie and trump
theme_set(theme_bw())
p1 <- ggplot(refund_bsdf, aes(x=city, y=amount)) +
geom_bar(stat = "identity", width=.5, fill="deepskyblue3") +
labs(title="Ordered Bar Chart of Refunds",
subtitle="Bernie Sanders",
caption="source: gov") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
p2 <- ggplot(refund_dtdf, aes(x = city, y= amount)) +
geom_bar(stat = "identity", width = .2, fill = "firebrick3") +
labs(title="Ordered Bar Chart of Refunds",
subtitle="Donald Trump",
caption= "source:. gov") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
#arrange the plots of historgrams of refunds
grid.arrange(p1,p2,ncol = 2)
#hisogram for both canidates.
theme_set(theme_bw())
ggplot(largest_amount_merge, aes(x=city, y=amount, color = canidate)) +
geom_bar(stat="identity", width=.5, fill = "lavenderblush2") +
labs(title="Ordered Bar Chart",
subtitle="Amount vs. City",
caption="source: gov") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
facet_wrap(~canidate) +
scale_color_manual(values=c("deepskyblue3", "firebrick3"))
p1 <- ggplot(refund_bsdf, aes(x=city, y=amount)) +
geom_boxplot(width=.5, fill="deepskyblue3") +
labs(title="Ordered boxplot of Refunds",
subtitle="Bernie Sanders",
caption="source: gov") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
scale_y_continuous(limits = c(-2000, 0))
#drop levels.
bernie_city <- droplevels(refund_bsdf)
#summary of Bernie refund by city
by(bernie_city$amount, bernie_city$city, summary)
p2 <- ggplot(refund_dtdf, aes(x = city, y= amount)) +
geom_boxplot( width = .2, fill = "firebrick3") +
labs(title="Ordered boxplot of Refunds",
subtitle="Donald Trump",
caption= "source:. gov") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
scale_y_continuous(limits = c(-4000, -2000))
#drop levels.
trump_city <- droplevels(refund_dtdf)
#Sumary of Trump refunds by city
by(trump_city$amount, trump_city$city, summary)
#arrange the boxplots of refunds
grid.arrange(p1,p2,ncol = 2)
#drop levels
largest_amount_bernie_trump <- droplevels(largest_amount_merge)
#summary of Trump, Bernie refunds by city
by(largest_amount_bernie_trump$amount,
largest_amount_bernie_trump$city, summary)
# summary of box plot by canidate in major cities.
#box plot of payments by canidate.
ggplot(aes(x = canidate, y = amount, fill = canidate),
data = largest_amount_bernie_trump) +
geom_boxplot() + labs(title = "Ordered Box Plot",
subtitle = "Amount vs. City",
caption = "source: .gov") +
scale_y_continuous(limits = c(0,200), breaks = seq(0,200,10)) +
scale_fill_manual(values=c("deepskyblue3", "firebrick3"))
#correlation teset
#no real correlation between zip code and the amount people spend.
cor.test(merge_bs_dt_df$zip,merge_bs_dt_df$amount, method = "pearson")
#geom line plot by state and facet_wrap by canidate.
ggplot(data = choose_city_df_sample, aes(date, amount)) +
geom_line(aes(color = city), stat = "identity") +
labs(titie = "Line Graph for Sanders V Trump",
subtitle = "Amount vs Date",
caption = "source: .gov") +
facet_wrap(~canidate, ncol = 1) +
scale_color_brewer(type = "div", palette = "RdBu",
guide = guide_legend(title = "Color", reverse = F,
override.aes = list(alpha = 1,
size = 2))) +
theme(panel.background = element_rect(fill = "gray49", colour = 'gray8'),
panel.grid.major.x = element_line(size = .1, color = "gray 8"),
panel.grid.major.y = element_line(size = .1, color = "gray 8")) +
scale_y_continuous(limits = c(-5000, 5000))
text_size <- element_text(size = 3.5) #set textsize
#box plot for both canidates.
ggplot(aes(x = city, y = amount), data = largest_amount_merge) +
geom_boxplot(aes(fill=city)) + labs(title = "Ordered Box Plot",
subtitle = "Amount vs. City",
caption = "source: .gov") +
scale_fill_brewer(type = "summary", palette = "RdBu",
guide = guide_legend(title = "City")) +
theme(panel.background = element_rect(fill = "gray49"),
panel.grid.major.x = element_line(size = .1, color = "gray 8"),
panel.grid.major.y = element_line(size = .1, color = "gray 8"),
axis.text.x = text_size) +
scale_y_continuous(limits = c(0,200), breaks = seq(0,200,10)) +
facet_wrap(~canidate)  +
coord_flip()
#create map for bernie v trump of contributors.
#head(ca_county) #check the county dataset
ggplot(data = ca_county, aes(x = long, y = lat, group = group)) + #chgoose ca_county dataset
geom_polygon(fill = I("linen")) + # fill will smooth color
geom_path(aes(color = subregion), linestyle = 1) +
geom_jitter(data = sample_bernie, aes(x =lon, y = lat, group= NULL),
color = "blue", alpha = 1) +  #choose bernie dataset
geom_jitter(data = sample_trump, aes(x = lon, y = lat, group = NULL),
color = "red", alpha = 0.3) + #choose trump dataset
labs(title = "Map of contributors",
subtitle = "Trump (red) v. Bernie (blue)",
caption= "source: .gov")  +
coord_map()  +  theme(panel.background = element_rect(fill = "gray49"),
panel.grid.major.x = element_line(size = .1, color = "gray 8"),
panel.grid.major.y = element_line(size = .1, color = "gray 8"))
# heat map for trump and bernie.
top_city <- names(sort(table(merge_bs_dt_df$city), decreasing = TRUE))[1:10] #top_city data
top_jobs <- names(sort(table(merge_bs_dt_df$occupation), decreasing = T))[1:10] #top_jobs column
logical_top_city_jobs <- (merge_bs_dt_df$city %in% top_city) &
(merge_bs_dt_df$occupation %in% top_jobs) #merge
#create heat map with legend.
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~canidate, ncol = 1)
ggplot(aes(x = amount,color = I("black"), fill = canidate),
data = merge_bs_dt_df_subset) +
geom_histogram(boundary = 0) +
labs(title = "Bernie v Trump Contributions Base 10",
subtitle = "Count vs. Amount",
caption = ".gov") +
scale_fill_manual(values=c("deepskyblue3", "firebrick3")) +
facet_wrap(~canidate) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,2000,100)) +
coord_trans(y ="sqrt") +
scale_y_log10()
#box plot for both canidates.
ggplot(aes(x = city, y = amount), data = largest_amount_merge) +
geom_boxplot(aes(fill=city)) + labs(title = "Ordered Box Plot",
subtitle = "Amount vs. City",
caption = "source: .gov") +
scale_fill_brewer(type = "summary", palette = "RdBu",
guide = guide_legend(title = "City")) +
theme(panel.background = element_rect(fill = "gray49"),
panel.grid.major.x = element_line(size = .1, color = "gray 8"),
panel.grid.major.y = element_line(size = .1, color = "gray 8"),
axis.text.x = text_size) +
scale_y_continuous(limits = c(0,200), breaks = seq(0,200,10)) +
facet_wrap(~canidate) +
coord_flip()
# heat map for trump and bernie.
top_city <- names(sort(table(merge_bs_dt_df$city), decreasing = TRUE))[1:10] #top_city data
top_jobs <- names(sort(table(merge_bs_dt_df$occupation), decreasing = T))[1:10] #top_jobs column
logical_top_city_jobs <- (merge_bs_dt_df$city %in% top_city) &
(merge_bs_dt_df$occupation %in% top_jobs) #merge
#create heat map with legend.
ggplot(merge_bs_dt_df[logical_top_city_jobs, ], aes(x = city, y = occupation)) +
stat_bin2d() +
scale_fill_gradient(trans = 'log', low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~canidate, ncol = 1)
